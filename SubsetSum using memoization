import java.util.Arrays;

public class SubsetSum {

    // Helper method to check if a subset with the given sum exists
    private static boolean isSubsetSumRec(int[] arr, int n, int target, int[][] memo) {
        // Base cases
        if (target == 0) return true; // Found a subset with the required sum
        if (n == 0) return false;    // No elements left to consider

        // Check if the result is already computed
        if (memo[n][target] != -1) return memo[n][target] == 1;

        // If the last element is greater than the target, ignore it
        if (arr[n - 1] > target) {
            memo[n][target] = isSubsetSumRec(arr, n - 1, target, memo) ? 1 : 0;
        } else {
            // Include or exclude the last element
            memo[n][target] = (isSubsetSumRec(arr, n - 1, target, memo)
                    || isSubsetSumRec(arr, n - 1, target - arr[n - 1], memo)) ? 1 : 0;
        }

        return memo[n][target] == 1;
    }

    // Public method to initiate the subset sum check
    public static boolean isSubsetSum(int[] arr, int target) {
        int n = arr.length;
        int[][] memo = new int[n + 1][target + 1];
        for (int[] row : memo) {
            Arrays.fill(row, -1); // Initialize memoization table with -1
        }
        return isSubsetSumRec(arr, n, target, memo);
    }

    public static void main(String[] args) {
        int[] arr = {3, 34, 4, 12, 5, 2};
        int target = 37;

        boolean result = isSubsetSum(arr, target);
        System.out.println("Subset with given sum exists: " + result);
    }
}
