class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        // Get the starting pixel color
        int startColor = image[sr][sc];
        // If the starting pixel's color is the same as the new color, return the image as-is
        if (startColor == color) {
            return image;
        }
        // Perform a DFS to fill the connected pixels
        fill(image, sr, sc, startColor, color);
        return image;
    }

    private void fill(int[][] image, int sr, int sc, int startColor, int color) {
        // Check for boundaries and ensure the current pixel matches the start color
        if (sr < 0 || sr >= image.length || sc < 0 || sc >= image[0].length || image[sr][sc] != startColor) {
            return;
        }
        // Change the pixel color
        image[sr][sc] = color;
        // Recursively fill adjacent pixels
        fill(image, sr + 1, sc, startColor, color); // Down
        fill(image, sr - 1, sc, startColor, color); // Up
        fill(image, sr, sc + 1, startColor, color); // Right
        fill(image, sr, sc - 1, startColor, color); // Left
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] image = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int sr = 1, sc = 1, newColor = 2;

        int[][] result = sol.floodFill(image, sr, sc, newColor);

        // Print the result
        for (int[] row : result) {
            for (int pixel : row) {
                System.out.print(pixel + " ");
            }
            System.out.println();
        }
    }
}
